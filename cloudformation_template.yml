AWSTemplateFormatVersion: 2010-09-09
Description: Creates the FULL CI/CD Pipeline (Infra + S3-Triggered Pipeline) for the Curator Compendium project.

Parameters:
  GitHubUsername:
    Type: String
    Description: Your GitHub Username (e.g., Srijato-05).
  GitHubRepoName:
    Type: String
    Description: Your GitHub repository name (e.g., AWS-Cloud-DevOps-CI-CD).
  GitHubBranchName:
    Type: String
    Default: main
    Description: The branch to trigger the pipeline (e.g., main).

Resources:
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # --- 1. IAM Roles ---
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: [{Effect: Allow, Principal: {Service: [ec2.amazonaws.com]}, Action: [sts:AssumeRole]}]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EC2InstanceRole]

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: [{Effect: Allow, Principal: {Service: [codedeploy.amazonaws.com]}, Action: [sts:AssumeRole]}]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: [{Effect: Allow, Principal: {Service: [codebuild.amazonaws.com]}, Action: [sts:AssumeRole]}]
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource: "*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: [{Effect: Allow, Principal: {Service: [codepipeline.amazonaws.com]}, Action: [sts:AssumeRole]}]
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeploymentGroup
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  # Add permission to read the secret
                  - secretsmanager:GetSecretValue
                Resource: "*"

  # --- 2. Infrastructure ---
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and SSH"
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0}

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08e5424edfe926b43 # Ubuntu 22.04 in ap-south-1
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds: [!Ref WebServerSecurityGroup]
      Tags:
        - Key: App
          Value: CuratorCompendium
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y apache2 ruby-full wget
          systemctl start apache2
          systemctl enable apache2
          cd /home/ubuntu
          wget https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          systemctl start codedeploy-agent
          systemctl enable codedeploy-agent

  # --- 3. CodeDeploy Application ---
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: Compendium-App
      ComputePlatform: Server

  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: Compendium-Prod-Fleet
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      Ec2TagFilters:
        - Key: App
          Value: CuratorCompendium
          Type: KEY_AND_VALUE
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      AutoRollbackConfiguration:
        Enabled: true
        Events: [DEPLOYMENT_FAILURE]

  # --- 4. CodeBuild Project ---
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: Compendium-BuildProject
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts: {Type: CODEPIPELINE}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml

  # --- 5. The Pipeline Itself ---
  ThePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: Curator-Compendium-Pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        # --- UPDATED: Source stage is now GitHub v1 with Polling ---
        - Name: Source
          Actions:
            - Name: GitHub_Source
              ActionTypeId: {Category: Source, Owner: ThirdParty, Provider: GitHub, Version: '1'}
              Configuration:
                Owner: !Ref GitHubUsername
                Repo: !Ref GitHubRepoName
                Branch: !Ref GitHubBranchName
                # Securely fetches your PAT from Secrets Manager
                OAuthToken: "{{resolve:secrets-manager:GitHubToken:SecretString}}"
                # This is the key: it checks for changes instead of using a webhook
                PollForSourceChanges: true
              OutputArtifacts: [Name: SourceArtifact]
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId: {Category: Build, Owner: AWS, Provider: CodeBuild, Version: '1'}
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts: [Name: SourceArtifact]
              OutputArtifacts: [Name: BuildArtifact]
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CodeDeploy
              ActionTypeId: {Category: Deploy, Owner: AWS, Provider: CodeDeploy, Version: '1'}
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref CodeDeployGroup
              InputArtifacts: [Name: BuildArtifact]
              RunOrder: 1

Outputs:
  InstancePublicIp:
    Description: Public IP of the web server
    Value: !GetAtt EC2Instance.PublicIp